
services:
  postgres-product:
    image: postgres:17.4
    container_name: postgres-product
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: product
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
       - pgdata:/var/lib/postgresql/data
       - ./product-init-scripts:/docker-entrypoint-initdb.d
    ports:
       - "5432:5432"
    networks:
      - mynet
  
  postgres-inventory:
    image: postgres:17.4
    container_name: postgres-inventory
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: inventory
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
       - pgdata1:/var/lib/postgresql/data
       - ./inventory-init-scripts:/docker-entrypoint-initdb.d
    ports:
       - "6432:5432"
    networks:
      - mynet
 
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  product:
    depends_on:
      postgres-product:
        condition: service_healthy
    build:
      context: ./product
      dockerfile: Dockerfile.multistage
    container_name: product
    hostname: product
    networks:
      - mynet
    environment:
      PORT: :8081
    ports:
      - 8081:8081
    deploy:
      restart_policy:
        condition: on-failure
    develop:
      watch:
        - action: sync
          path: .
          target: /app

networks:
  mynet:
    driver: bridge

volumes:
  pgdata:
  pgdata1: