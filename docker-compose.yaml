services:
  postgres-product:
    image: postgres:17.4
    container_name: postgres-product
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: product
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
       - pgdata:/var/lib/postgresql/data
       - ./product-init-scripts:/docker-entrypoint-initdb.d
    ports:
       - "5432:5432"
    networks:
      - mynet
  
  postgres-inventory:
    image: postgres:17.4
    container_name: postgres-inventory
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: inventory
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
       - pgdata1:/var/lib/postgresql/data
       - ./inventory-init-scripts:/docker-entrypoint-initdb.d
    ports:
       - "6432:5432"
    networks:
      - mynet

  postgres-oms:
    image: postgres:17.4
    container_name: postgres-oms
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: oms
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
       - pgdata2:/var/lib/postgresql/data
       - ./oms-init-scripts:/docker-entrypoint-initdb.d
    ports:
       - "7432:5432"
    networks:
      - mynet
 
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mynet

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mynet

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # Wait for Kafka to be ready
      echo 'Waiting for Kafka to be ready...'
      while ! kafka-topics --bootstrap-server kafka:29092 --list; do
        echo 'Kafka not ready yet...'
        sleep 5
      done

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic oms.reserve-inventory.0 --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic oms.release-inventory.0 --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic oms.order-item-stock-reserved.0 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - mynet

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.3.8
    container_name: redpanda-console
    depends_on:
      - kafka
      - init-kafka
    ports:
      - "8082:8080"
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml && /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
          sasl:
            enabled: false
          tls:
            enabled: false
        server:
          listenPort: 8080
    networks:
      - mynet

  product:
    depends_on:
      postgres-product:
        condition: service_healthy
    build:
      context: ./product
      dockerfile: Dockerfile.multistage
    container_name: product
    hostname: product
    networks:
      - mynet
    environment:
      PORT: :8081
    ports:
      - 8081:8081
    deploy:
      restart_policy:
        condition: on-failure
    develop:
      watch:
        - action: sync
          path: .
          target: /app

  inventory:
    depends_on:
      postgres-inventory:
        condition: service_healthy
      kafka:
        condition: service_started
    build:
      context: ./inventory
      dockerfile: Dockerfile.multistage
    container_name: inventory
    hostname: inventory
    networks:
      - mynet
    environment:
      PORT: :9081
      KAFKA_BROKERS: kafka:29092
    ports:
      - 9081:9081
    deploy:
      restart_policy:
        condition: on-failure
    develop:
      watch:
        - action: sync
          path: .
          target: /app

  oms:
    depends_on:
      postgres-oms:
        condition: service_healthy
      kafka:
        condition: service_started
    build:
      context: ./oms
      dockerfile: Dockerfile.multistage
    container_name: oms
    hostname: oms
    networks:
      - mynet
    environment:
      PORT: :10081
      KAFKA_BROKERS: kafka:29092
    ports:
      - 10081:10081
    deploy:
      restart_policy:
        condition: on-failure
    develop:
      watch:
        - action: sync
          path: .
          target: /app

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - mynet
    depends_on:
      - product
    environment:
      - REACT_APP_API_URL_PRODUCT=http://localhost:8081
      - REACT_APP_API_URL_OMS=http://localhost:10081
networks:
  mynet:
    driver: bridge

volumes:
  pgdata:
  pgdata1:
  pgdata2: